import 'package:equatable/equatable.dart';
import 'package:hive/hive.dart';

part 'user_model.g.dart'; // This line will be generated by hive_generator

@HiveType(typeId: 0)
class UserModel extends Equatable {
  @HiveField(0)
  final String id;
  @HiveField(1)
  final String email;
  @HiveField(2)
  final String name;
  @HiveField(3)
  final String? photoUrl;
  @HiveField(4)
  final DateTime createdAt;
  @HiveField(5)
  final UserPreferences preferences;
  @HiveField(6)
  final UserStats stats;

  const UserModel({
    required this.id,
    required this.email,
    required this.name,
    this.photoUrl,
    required this.createdAt,
    required this.preferences,
    required this.stats,
  });

  @override
  List<Object?> get props =>
      [id, email, name, photoUrl, createdAt, preferences, stats];

  Map<String, dynamic> toJson() => {
        'id': id,
        'email': email,
        'name': name,
        'photoUrl': photoUrl,
        'createdAt': createdAt.toIso8601String(),
        'preferences': preferences.toJson(),
        'stats': stats.toJson(),
      };

  factory UserModel.fromJson(Map<String, dynamic> json) => UserModel(
        id: json['id'],
        email: json['email'],
        name: json['name'],
        photoUrl: json['photoUrl'],
        createdAt: DateTime.parse(json['createdAt']),
        preferences: UserPreferences.fromJson(json['preferences']),
        stats: UserStats.fromJson(json['stats']),
      );
}

@HiveType(typeId: 1)
class UserPreferences extends Equatable {
  @HiveField(0)
  final bool darkMode;
  @HiveField(1)
  final String units; // metric or imperial
  @HiveField(2)
  final int dailyCalorieGoal;
  @HiveField(3)
  final int dailyProteinGoal;
  @HiveField(4)
  final List<String> workoutReminders;

  const UserPreferences({
    required this.darkMode,
    required this.units,
    required this.dailyCalorieGoal,
    required this.dailyProteinGoal,
    required this.workoutReminders,
  });

  @override
  List<Object> get props => [
        darkMode,
        units,
        dailyCalorieGoal,
        dailyProteinGoal,
        workoutReminders
      ];

  Map<String, dynamic> toJson() => {
        'darkMode': darkMode,
        'units': units,
        'dailyCalorieGoal': dailyCalorieGoal,
        'dailyProteinGoal': dailyProteinGoal,
        'workoutReminders': workoutReminders,
      };

  factory UserPreferences.fromJson(Map<String, dynamic> json) =>
      UserPreferences(
        darkMode: json['darkMode'] ?? false,
        units: json['units'] ?? 'metric',
        dailyCalorieGoal: json['dailyCalorieGoal'] ?? 2000,
        dailyProteinGoal: json['dailyProteinGoal'] ?? 150,
        workoutReminders: List<String>.from(json['workoutReminders'] ?? []),
      );
}

@HiveType(typeId: 2)
class UserStats extends Equatable {
  @HiveField(0)
  final int totalWorkouts;
  @HiveField(1)
  final int currentStreak;
  @HiveField(2)
  final int longestStreak;
  @HiveField(3)
  final double totalWeightLifted;
  @HiveField(4)
  final int totalCaloriesLogged;

  const UserStats({
    required this.totalWorkouts,
    required this.currentStreak,
    required this.longestStreak,
    required this.totalWeightLifted,
    required this.totalCaloriesLogged,
  });

  @override
  List<Object> get props => [
        totalWorkouts,
        currentStreak,
        longestStreak,
        totalWeightLifted,
        totalCaloriesLogged
      ];

  Map<String, dynamic> toJson() => {
        'totalWorkouts': totalWorkouts,
        'currentStreak': currentStreak,
        'longestStreak': longestStreak,
        'totalWeightLifted': totalWeightLifted,
        'totalCaloriesLogged': totalCaloriesLogged,
      };

  factory UserStats.fromJson(Map<String, dynamic> json) => UserStats(
        totalWorkouts: json['totalWorkouts'] ?? 0,
        currentStreak: json['currentStreak'] ?? 0,
        longestStreak: json['longestStreak'] ?? 0,
        totalWeightLifted: (json['totalWeightLifted'] ?? 0).toDouble(),
        totalCaloriesLogged: json['totalCaloriesLogged'] ?? 0,
      );
}